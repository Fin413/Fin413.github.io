{"version":3,"sources":["components/Video.js","components/ArchivedVideos.js","components/LiveVideos.js","components/VideoSections.js","App.js","reportWebVitals.js","index.js"],"names":["Video","title","videoEmbed","videoParams","substring","indexOf","className","src","frameBorder","width","height","allowFullScreen","ArchivedVideos","data","useState","maxVideos","setMaxVideos","tempVideoDisp","bottomElement","onClick","i","length","push","map","video","name","embed","html","LiveVideos","noVideos","dispVideos","isLive","badges","live","streaming","isArchived","archived","unshift","type","token","sconaChannelId","VideoSections","liveError","setLiveError","isLiveLoaded","setIsLiveLoaded","liveVideos","setLiveVideos","showcaseVideos","setShowcaseVideos","showcaseLoaded","setShowcaseLoaded","showcaseError","setShowcaseError","useEffect","fetch","method","headers","then","res","json","result","error","Object","values","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db79d4a6.chunk.js","sourcesContent":["const Video = ({ title, videoEmbed }) => {\n    // directly using the returned html embed code is unsafe.\n    // If the server responce was spoofed an attacker could \n    // inject any html or js they wanted\n\n\n    /*\n        TODO\n        get the diffrence between a live video and an archived live video\n        also seduled videos and shit\n\n        if video is seceduled \n        archived: false\n        streaming: false\n\n        if live video is archived\n        {streaming: false, archived: true}\n\n        And im assuming if its currently live\n        {streaming: true, archived: false}\n\n    */\n    if(videoEmbed === null) return (<></>);\n\n    let videoParams = videoEmbed.substring(videoEmbed.indexOf(\"https://player.vimeo.com/video/\") + 31);\n    videoParams = videoParams.substring(0, videoParams.indexOf(\"\\\"\"));\n    // width=\"640\" height=\"360\" frameBorder=\"0\" \n    // 17 / 9\n\n    //<iframe title=\"vimeo-player\" src=\"https://player.vimeo.com/video/640108690?h=ff52d55639\" width=\"640\" height=\"360\" frameborder=\"0\" allowfullscreen></iframe>\n\n    return(\n        <div className=\"videoWrapper\">\n            <iframe className=\"video\" title={title} src={`https://player.vimeo.com/video/${videoParams}`} frameBorder=\"0\" width=\"100%\" height=\"100%\" allowFullScreen></iframe>\n        </div>\n    );\n}\n\nexport default Video","import { useState } from \"react\";\nimport Video from \"./Video\";\n\n\nconst ArchivedVideos = ({data}) => {\n    const [maxVideos, setMaxVideos] = useState(4);\n\n    var tempVideoDisp = [];\n    var bottomElement = <button className=\"btn\" onClick={clickHandler}>Load More</button>;\n  \n    for(let i = 0; i < data.length; i++){\n        tempVideoDisp.push(data[i]);\n        if(tempVideoDisp.length === maxVideos) break;\n        if(i === data.length - 1) bottomElement = <p className=\"transparentText\">Looks like you've reached the end</p>;\n    }\n\n    // get next page and if there is no next page el then just say bottom shit\n    function clickHandler() {\n        setMaxVideos(maxVideos + 4);\n    }\n\n    // function getNextPage(){\n        // fetch(`https://api.vimeo.com/users/${sconaChannelId}/videos?direction=desc&page=2`, {\n\t\t// \tmethod:'GET', \n\t\t// \theaders: {'Authorization': 'Bearer ' + token}\n\t\t// })\n\t\t// .then(res => res.json())\n\t\t// .then(\n        //     (result) => {\n        //         setVideos(result.data);\n        //         setIsLoaded(true);\n        //         console.log(result);\n        //     },\n\n        //     (error) => {\n        //         setIsLoaded(true);\n        //         setError(error);\n        //         console.log(\"ERROR: \" + error);\n        //     }\n\t\t// )\n    // }\n\n    return(\n        <>\n            <div className=\"videoGrid\">\n                {tempVideoDisp.map((video, i) => (\n                    <div key={i} className=\"videoTitleContainer\">\n                        <Video title={video.name} videoEmbed={video.embed.html}/>\n                        <p>{video.name}</p> \n                    </div>\n                ))}\n            </div>\n            { bottomElement }\n        </>\n    )\t\n}\n\nexport default ArchivedVideos","import Video from \"./Video\";\n\nconst LiveVideos = ({ data }) => {\n    let dispVideos = [];\n    let noVideos;\n\n    for(let i = data.length - 1; i > 0 ; i--){\n        let isLive = data[i].embed.badges.live.streaming;\n        let isArchived = data[i].embed.badges.live.archived;\n\n        if(isLive && !isArchived){\n            dispVideos.unshift(data[i]);\n        }else if(data[i].type === \"live\" && (isLive || (!isLive && !isArchived))){\n            dispVideos.push(data[i]);\n        }\n    }\n\n    if(dispVideos.length === 0){\n        noVideos = <h2 className=\"transparentText\">No live videos</h2>;\n    }\n\n    return (\n        <div className=\"videoGrid\">\n            {dispVideos.map((video, i) => (\n                <Video key={i} title={video.name} videoEmbed={video.embed.html}/>\n            ))}\n            \n            { noVideos }\n        </div>\n    );\n}\n\nexport default LiveVideos","import { useState, useEffect } from \"react\";\nimport ArchivedVideos from \"./ArchivedVideos\";\nimport LiveVideos from \"./LiveVideos\";\n\nconst token = \"5d5c157df9f684e811d74a303341da43\";\nconst showcaseId = \"7664293\";\nconst sconaChannelId = \"82197283\";\n\nconst VideoSections = () =>{ \n    const [liveError, setLiveError] = useState(null);\n\tconst [isLiveLoaded, setIsLiveLoaded] = useState(false);\n\tconst [liveVideos, setLiveVideos] = useState([]);\n\n    const [showcaseVideos, setShowcaseVideos] = useState([]);\n    const [showcaseLoaded, setShowcaseLoaded] = useState(false);\n    const [showcaseError, setShowcaseError] = useState(null);\n\n\tuseEffect(() => {\n        fetch(`https://api.vimeo.com/users/${sconaChannelId}/videos?filter=live`, {\n            method:'GET', \n            headers: {'Authorization': 'Bearer ' + token}\n        })\n        .then(res => res.json())\n        .then(\n            (result) => {\n                setLiveVideos(result.data);\n                setIsLiveLoaded(true);\n            },\n            (error) => {\n                setIsLiveLoaded(true);\n                setLiveError(Object.values(error));\n            }    \n        )\n\n        // showcases were previously called albums but the API hasn't yet updated\n        // this may cause issues in the future when they do eventually update it\n        fetch(`https://api.vimeo.com/users/${sconaChannelId}/albums/${showcaseId}/videos`, {\n            method:'GET', \n            headers: {'Authorization': 'Bearer ' + token}\n        })\n        .then(res => res.json())\n        .then(\n            (result) => {\n                setShowcaseVideos(result.data);\n                setShowcaseLoaded(true);\n                console.log(result);\n            },\n            (error) => {\n                setShowcaseLoaded(true);\n                setShowcaseError(error);\n            }    \n        )\n\t}, [])\n\n    function getLiveContent(){\n        if(liveError){\n            return <p className=\"transparentText\">Error: {liveError}</p>;\n        } else if(!isLiveLoaded){\n            return <p className=\"transparentText\">Loading...</p>;\n        } else{\n            return <LiveVideos data={liveVideos}/>;\n        }\n    }\n\n    function getShowcaseContent(){\n        if(showcaseError){\n            return <p className=\"transparentText\">Error: {showcaseError}</p>;\n        }else if(!showcaseLoaded){\n            return <p className=\"transparentText\">Loading...</p>;\n        }else{\n            return <ArchivedVideos data={showcaseVideos}/>;\n        }\n    }\n\n    return(\n        <>\n            <h1 className=\"subtitle\">Live Videos</h1>\n            { getLiveContent() }\n\n            <h1 className=\"subtitle\">Archived Videos 2020</h1>\n            { getShowcaseContent() }\n        </>\n\n        /*  if (error) {\n                return <div>Error: {error.message}</div>;\n            } else if (!isLoaded) {\n                return <div>Loading...</div>;\n            } else {\n                return (\n                    <div className=\"videoGrid\">\n                        {videos.map((video, i) => (\n                            <Video key={i} title={video.name} videoEmbed={video.embed.html}/>\n                        ))}\n                    </div>\n                );\n            }\n        */\n    );\n}\n\nexport default VideoSections;","import './App.css';\nimport VideoSections from './components/VideoSections';\n\nfunction App() {\n\treturn(\n\t\t<>\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1 className=\"title notSelectable\">Scona <span className=\"live\">&nbsp;LIVE&nbsp;<span className=\"circle\"></span>&nbsp;</span></h1>\n\t\t\t\t\n\t\t\t\t<hr/>\n\t\t\t\t<p className=\"info\">Choose the live stream you want below. This year's archived videos will be available at the end of the season to view and download.</p>\n\t\t\t\t<h3 className=\"note\">Please note that all the extra-curricular games in this gym are public events. Neither Strathcona High School nor Metro Athletics can control who is watching or recording the events; therefore, it is incumbent on all schools, coaches, parents, and athletes to know that the events in this gym may be live-streamed.</h3>\n\t\t\t\t<hr/>\n\t\t\t</div>\n\t\t\n\t\t\t<VideoSections/>\n\n\t\t\t<p className=\"footer\">© Strathcona High School 2021 - Created by Finlay Soehn</p>\n\t\t</>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}