{"version":3,"sources":["../lib/getTimeZones.js"],"names":["getTimeZones","rawTimeZones","reduce","acc","timeZone","currentDate","DateTime","fromObject","locale","zone","name","isValid","timeZoneWithCurrentTimeData","currentTimeOffsetInMinutes","offset","push","currentTimeFormat","useCurrentOffset","sort","a","b","compareNumbers","compareStrings","alternativeName","mainCities","x","y","localeCompare"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;;;AAEe,SAASA,YAAT,GAAwB;AACrC,SAAOC,sBACJC,MADI,CACG,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AAC/B,UAAMC,WAAW,GAAGC,gBAASC,UAAT,CAAoB;AACtCC,MAAAA,MAAM,EAAE,OAD8B;AAEtCC,MAAAA,IAAI,EAAEL,QAAQ,CAACM;AAFuB,KAApB,CAApB,CAD+B,CAM/B;AACA;AACA;AACA;;;AACA,QAAIL,WAAW,CAACM,OAAZ,KAAwB,KAA5B,EAAmC;AACjC,aAAOR,GAAP;AACD;;AAED,UAAMS,2BAA2B,GAAG,EAClC,GAAGR,QAD+B;AAElCS,MAAAA,0BAA0B,EAAER,WAAW,CAACS;AAFN,KAApC;AAKAX,IAAAA,GAAG,CAACY,IAAJ,CAAS,EACP,GAAGH,2BADI;AAEPI,MAAAA,iBAAiB,EAAE,6BAAeJ,2BAAf,EAA4C;AAC7DK,QAAAA,gBAAgB,EAAE;AAD2C,OAA5C;AAFZ,KAAT;AAOA,WAAOd,GAAP;AACD,GA5BI,EA4BF,EA5BE,EA6BJe,IA7BI,CA6BC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,WACEC,cAAc,CAACF,CAAD,EAAIC,CAAJ,CAAd,IACAE,cAAc,CAACH,CAAC,CAACI,eAAH,EAAoBH,CAAC,CAACG,eAAtB,CADd,IAEAD,cAAc,CAACH,CAAC,CAACK,UAAF,CAAa,CAAb,CAAD,EAAkBJ,CAAC,CAACI,UAAF,CAAa,CAAb,CAAlB,CAHhB;AAKD,GAnCI,CAAP;AAoCD;;AAED,SAASH,cAAT,CAAwBI,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,SAAOD,CAAC,CAACZ,0BAAF,GAA+Ba,CAAC,CAACb,0BAAxC;AACD;;AAED,SAASS,cAAT,CAAwBG,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,MAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;AAClD,WAAOD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAAP;AACD;;AACD,SAAO,CAAP;AACD","sourcesContent":["import { DateTime } from \"luxon\";\n\nimport rawTimeZones from \"../raw-time-zones.json\";\n\nimport formatTimeZone from \"./formatTimeZone.js\";\n\nexport default function getTimeZones() {\n  return rawTimeZones\n    .reduce(function (acc, timeZone) {\n      const currentDate = DateTime.fromObject({\n        locale: \"en-US\",\n        zone: timeZone.name,\n      });\n\n      // We build on the latest Node.js version, Node.js embed IANA databases\n      // it might happen that the environment that will execute getTimeZones() will not know about some\n      // timezones. So we ignore the timezone at runtim\n      // See https://github.com/vvo/tzdb/issues/43\n      if (currentDate.isValid === false) {\n        return acc;\n      }\n\n      const timeZoneWithCurrentTimeData = {\n        ...timeZone,\n        currentTimeOffsetInMinutes: currentDate.offset,\n      };\n\n      acc.push({\n        ...timeZoneWithCurrentTimeData,\n        currentTimeFormat: formatTimeZone(timeZoneWithCurrentTimeData, {\n          useCurrentOffset: true,\n        }),\n      });\n\n      return acc;\n    }, [])\n    .sort((a, b) => {\n      return (\n        compareNumbers(a, b) ||\n        compareStrings(a.alternativeName, b.alternativeName) ||\n        compareStrings(a.mainCities[0], b.mainCities[0])\n      );\n    });\n}\n\nfunction compareNumbers(x, y) {\n  return x.currentTimeOffsetInMinutes - y.currentTimeOffsetInMinutes;\n}\n\nfunction compareStrings(x, y) {\n  if (typeof x === \"string\" && typeof y === \"string\") {\n    return x.localeCompare(y);\n  }\n  return 0;\n}\n"],"file":"getTimeZones.js"}