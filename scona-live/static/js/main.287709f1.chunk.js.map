{"version":3,"sources":["components/Video.js","components/ArchivedVideos.js","components/LiveVideos.js","components/VideoSections.js","App.js","reportWebVitals.js","index.js"],"names":["Video","title","videoEmbed","videoParams","substring","indexOf","className","src","frameborder","width","height","allowFullScreen","ArchivedVideos","data","useState","maxVideos","setMaxVideos","tempVideoDisp","bottomElement","onClick","i","length","type","embed","badges","live","archived","push","map","video","name","html","LiveVideos","noVideos","dispVideos","isLive","streaming","isArchived","unshift","VideoSections","error","setError","isLoaded","setIsLoaded","videos","setVideos","getContent","useEffect","fetch","method","headers","then","res","json","result","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.287709f1.chunk.js","sourcesContent":["const Video = ({ title, videoEmbed }) => {\n    // directly using the returned html embed code is unsafe.\n    // If the server responce was spoofed an attacker could \n    // inject any html or js they wanted\n\n\n    /*\n        TODO\n        get the diffrence between a live video and an archived live video\n        also seduled videos and shit\n\n        if video is seceduled \n        archived: false\n        streaming: false\n\n        if live video is archived\n        {streaming: false, archived: true}\n\n        And im assuming if its currently live\n        {streaming: true, archived: false}\n\n    */\n    if(videoEmbed === null) return (<></>);\n\n    let videoParams = videoEmbed.substring(videoEmbed.indexOf(\"https://player.vimeo.com/video/\") + 31);\n    videoParams = videoParams.substring(0, videoParams.indexOf(\"\\\"\"));\n    // width=\"640\" height=\"360\" frameBorder=\"0\" \n    // 17 / 9\n\n    //<iframe title=\"vimeo-player\" src=\"https://player.vimeo.com/video/640108690?h=ff52d55639\" width=\"640\" height=\"360\" frameborder=\"0\" allowfullscreen></iframe>\n\n    return(\n        <div className=\"videoWrapper\">\n            <iframe className=\"video\" title={title} src={`https://player.vimeo.com/video/${videoParams}`} frameborder=\"0\" width=\"100%\" height=\"100%\" allowFullScreen></iframe>\n        </div>\n    );\n}\n\nexport default Video","import { useState } from \"react\";\nimport Video from \"./Video\";\n\nconst ArchivedVideos = ({data}) => {\n    const [maxVideos, setMaxVideos] = useState(4);\n\n    var tempVideoDisp = [];\n    var bottomElement = <button className=\"btn\" onClick={clickHandler}>Load More</button>;\n  \n    for(let i = 0; i < data.length; i++){\n        if(data[i].type === \"video\" || data[i].embed.badges.live.archived) tempVideoDisp.push(data[i]);\n        if(tempVideoDisp.length === maxVideos) break;\n        if(i === data.length - 1) bottomElement = <p className=\"transparentText\">Looks like you've reached the end</p>;\n    }\n\n    function clickHandler() {\n        setMaxVideos(maxVideos + 4);\n    }\n\n    return(\n        <>\n            <div className=\"videoGrid\">\n                {tempVideoDisp.map((video, i) => (\n                    <Video key={i} title={video.name} videoEmbed={video.embed.html}/>\n                ))}\n            </div>\n            { bottomElement }\n        </>\n    )\t\n}\n\nexport default ArchivedVideos","import Video from \"./Video\";\n\nconst LiveVideos = ({data}) => {\n    let dispVideos = [];\n    let noVideos;\n\n    for(let i = 0; i < data.length; i++){\n        let isLive = data[i].embed.badges.live.streaming;\n        let isArchived = data[i].embed.badges.live.archived;\n\n        if(isLive && !isArchived){\n            dispVideos.unshift(data[i]);\n        }else if(data[i].type === \"live\" && (isLive || (!isLive && !isArchived))){\n            dispVideos.push(data[i]);\n        }\n    }\n\n    if(dispVideos.length === 0){\n        noVideos = <h2 className=\"transparentText\">No live videos</h2>;\n    }\n\n    return (\n        <div className=\"videoGrid\">\n            {dispVideos.map((video, i) => (\n                <Video key={i} title={video.name} videoEmbed={video.embed.html}/>\n            ))}\n            \n            { noVideos }\n        </div>\n    );\n}\n\nexport default LiveVideos","import { useState, useEffect } from \"react\";\nimport ArchivedVideos from \"./ArchivedVideos\";\nimport LiveVideos from \"./LiveVideos\";\nimport Video from \"./Video\";\n\nconst token = \"5d5c157df9f684e811d74a303341da43\";\nconst sconaChannelId = \"82197283\";\n\nconst VideoSections = () =>{ \n    const [error, setError] = useState(null);\n\tconst [isLoaded, setIsLoaded] = useState(false);\n\tconst [videos, setVideos] = useState([]);\n\n\tuseEffect(() => {\n\t\tfetch(`https://api.vimeo.com/users/${sconaChannelId}/videos?direction=desc`, {\n\t\t\tmethod:'GET', \n\t\t\theaders: {'Authorization': 'Bearer ' + token}\n\t\t})\n\t\t.then(res => res.json())\n\t\t.then(\n            (result) => {\n                setVideos(result.data);\n                setIsLoaded(true);\n                console.log(result);\n            },\n\n            (error) => {\n                setIsLoaded(true);\n                setError(error);\n                console.log(\"ERROR: \" + error);\n            }\n\t\t)\n\t}, [])\n\n    function getContent(live) {\n        // legit one word diffrent between the first two returns\n        // can I simplify???\n\n        if(isLoaded && live){\n            return (\n                <LiveVideos data={videos}/>\n                // <div className=\"videoGrid\">\n                //     {videos.map((video, i) => (\n                //         video.type === \"live\" && (video.embed.badges.live.streaming || (!video.embed.badges.live.streaming && !video.embed.badges.live.archived)) ? <Video key={i} title={video.name} videoEmbed={video.embed.html}/> : null\n                //     ))}\n                // </div>\n            );\n        }else if(isLoaded){\n            return (\n                <ArchivedVideos data={videos}/>\n            );\n        }else if(!isLoaded){\n            return <p className=\"transparentText\">Loading...</p>;\n        }else if(error){\n            return <p>Error: {error}</p>;\n        }\n    }\n\n    return(\n        <div>\n            <h1 className=\"subtitle\">Live Videos</h1>\n            {/* <hr/> */}\n\n            { getContent(true) }\n\n            <h1 className=\"subtitle\">Archived Videos</h1>\n            {/* <hr/> */}\n\n            { getContent(false) }\n        </div>\n\n        /*  if (error) {\n                return <div>Error: {error.message}</div>;\n            } else if (!isLoaded) {\n                return <div>Loading...</div>;\n            } else {\n                return (\n                    <div className=\"videoGrid\">\n                        {videos.map((video, i) => (\n                            <Video key={i} title={video.name} videoEmbed={video.embed.html}/>\n                        ))}\n                    </div>\n                );\n            }\n        */\n    );\n}\n\nexport default VideoSections;","import './App.css';\nimport VideoSections from './components/VideoSections';\n\nfunction App() {\n\treturn(\n\t\t<div>\n\t\t\t{/* todo: sort videos by date (especially sceduled events) */}\n\t\t\t<div className=\"header\">\n\n\t\t\t\t<h1 className=\"title notSelectable\">Scona <span className=\"live\">&nbsp;LIVE&nbsp;<span className=\"circle\"></span>&nbsp;</span></h1>\n\t\t\t\t<hr/>\n\t\t\t\t<p className=\"info\">Choose the live stream you want below. This year's archived videos may be found below. Any videos that have been archived as Private will be available at the end of the season for download.</p>\n\t\t\t\t<h3 className=\"note\">Please note that all the extra-curricular games in this gym are public events. Neither Strathcona High School nor Metro Athletics can control who is watching or recording the events; therefore, it is incumbent on all schools, coaches, parents, and athletes to know that the events in this gym may be live-streamed.</h3>\n\t\t\t\t<hr/>\n\t\t\t</div>\n\t\t\n\t\t\t<VideoSections/>\n\n\t\t\t<p className=\"footer\">© Strathcona High School 2021 - Created by Finlay Soehn</p>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}